import { StyleSheet, Text, View, TouchableOpacity } from "react-native";
import React, { useState, useRef, useEffect } from "react";
import LoadingBar from "./Loadingbar";
import VoiceIcon from "../../assets/voice-icon.svg";
import Color from "../../styles/color";
import Voice from "@react-native-voice/voice";
import { Audio } from "expo-av";

const VoiceButton = () => {
  const [isListening, setIsListening] = useState(false);
  const [text, setText] = useState("");
  const [error, setError] = useState("");
  const timeoutRef = useRef(null);

  useEffect(() => {
    // ÏùåÏÑ± Ïù∏Ïãù Ï¥àÍ∏∞Ìôî
    const initializeVoice = async () => {
      try {
        // ÏùåÏÑ± Ïù∏Ïãù Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
        Voice.onSpeechStart = () => setIsListening(true);
        Voice.onSpeechEnd = () => stopListening();
        Voice.onSpeechError = (e) => setError(e.error);
        Voice.onSpeechResults = (e) => handleSpeechResult(e.value[0]);
        Voice.onSpeechVolumeChanged = (e) => console.log("Volume changed:", e);

        // Ï¥àÍ∏∞ÌôîÍ∞Ä ÏôÑÎ£åÎêòÏóàÏùÑ Îïå ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setError(""); // Ï¥àÍ∏∞Ìôî Ïãú Ïò§Î•ò Î©îÏãúÏßÄ Ï¥àÍ∏∞Ìôî
      } catch (e) {
        console.error("ÏùåÏÑ± Ïù∏Ïãù Ï¥àÍ∏∞Ìôî Ïã§Ìå®:", e);
        setError("ÏùåÏÑ± Ïù∏Ïãù Ï¥àÍ∏∞Ìôî Ïã§Ìå®");
      }
    };

    initializeVoice();

    return () => {
      // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Î¶¨Ïä§ÎÑà Ï†úÍ±∞
      Voice.destroy().then(Voice.removeAllListeners);
    };
  }, []);

  // ÏùåÏÑ± ÏãúÏûë Ìï®Ïàò
  const startListening = async () => {
    console.log(Voice);
    if (Voice._loaded) {
      try {
        const { granted } = await Audio.requestPermissionsAsync();
        if (!granted) {
          alert("ÎßàÏù¥ÌÅ¨ Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§!");
          return;
        }

        setText("");
        setError("");
        setIsListening(true);
        console.log("üéß ÏùåÏÑ± Ïù∏Ïãù ÏãúÏûë...");
        await Voice.start("ko-KR");

        startTimeout();
      } catch (e) {
        console.error("ÏùåÏÑ± Ïù∏Ïãù ÏãúÏûë Ïã§Ìå®:", e);
        setError("ÏùåÏÑ± Ïù∏ÏãùÏùÑ ÏãúÏûëÌï† Ïàò ÏóÜÏäµÎãàÎã§.");
        setIsListening(false);
      }
    } else {
      console.log("Voice Î™®ÎìàÏù¥ ÏïÑÏßÅ Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
    }
  };

  // ÏùåÏÑ± Í≤∞Í≥º Ï≤òÎ¶¨ Ìï®Ïàò
  const handleSpeechResult = (newText) => {
    setText(newText);
    console.log("üéôÔ∏è Ïù∏ÏãùÎêú ÌÖçÏä§Ìä∏:", newText);
    // ÏÉà ÏùåÏÑ± Îì§Ïñ¥Ïò§Î©¥ ÌÉÄÏù¥Î®∏ Î¶¨ÏÖã
    startTimeout();
  };

  // 3Ï¥à Î¨¥Ïùå ÌÉÄÏù¥Î®∏ Ìï®Ïàò
  const startTimeout = () => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
    timeoutRef.current = setTimeout(() => {
      stopListening();
    }, 3000);
  };

  // ÏùåÏÑ± Ï¢ÖÎ£å Ìï®Ïàò
  const stopListening = async () => {
    try {
      await Voice.stop();
      console.log("üõë ÏùåÏÑ± Ïù∏Ïãù Ï¢ÖÎ£å");
      setIsListening(false);
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    } catch (e) {
      console.error("ÏùåÏÑ± Ïù∏Ïãù Ï§ëÏßÄ Ïã§Ìå®:", e);
    }
  };

  const handlePress = () => {
    if (isListening) {
      stopListening();
    } else {
      startListening();
    }
  };

  return (
    <View style={styles.buttonContainer}>
      {isListening ? (
        <View style={styles.LoadingBarContainer}>
          <LoadingBar />
          <Text style={styles.listeningText}>Îì£Îäî Ï§ë...</Text>
        </View>
      ) : (
        <TouchableOpacity style={styles.iconContainer} onPress={handlePress}>
          <VoiceIcon />
        </TouchableOpacity>
      )}
      {text ? <Text style={styles.resultText}>üó£Ô∏è {text}</Text> : null}
      {error ? <Text style={styles.errorText}>‚ö†Ô∏è {error}</Text> : null}
    </View>
  );
};

export default VoiceButton;

const styles = StyleSheet.create({
  buttonContainer: {
    flex: 1,
  },
  LoadingBarContainer: {
    flex: 1,
  },
  iconContainer: {
    margin: 15,
    flex: 1,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: Color.yellow500,
    borderRadius: 50,
  },
});
